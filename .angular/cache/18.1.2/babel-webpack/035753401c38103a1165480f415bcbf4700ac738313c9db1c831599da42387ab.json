{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let GithubService = /*#__PURE__*/(() => {\n  class GithubService {\n    constructor(http) {\n      this.http = http;\n      // readonly makes properties immutable\n      this.githubBaseUrl = \"https://api.github.com\";\n      this.colorsUrl = 'https://raw.githubusercontent.com/ozh/github-colors/master/colors.json';\n      // unique identifying for storing and retrieving data\n      this.cacheKey = \"githubrepocachekey\";\n    }\n    /**\n    * Retrieves Github Repo Information\n    *\n    * Service makes HTTP requests using this.http.\n    * Every HTTP request returns an RxJS Observable; when subscribed, it sends the request and emits the results when the server responds.\n    * @param user GitHub username\n    * @param repoName Repository name\n    * @returns Observable with repository data\n    */\n    getGithubRepoData(username, repoName) {\n      // Check if this data is available locally\n      const cachedData = localStorage.getItem(this.cacheKey);\n      if (cachedData) {\n        // Return the Cached Data to reduce API Calls\n        // of is an operator used to create an Observable that emits the values provided to it\n        // parse is required to convert a JSON string back to a JSON object after retrieving from storage\n        return of(JSON.parse(cachedData));\n      }\n      // Modify Base URL\n      const githubApiUrl = `${this.githubBaseUrl}/repos/${username}/${repoName}`;\n      const result = this.http.get(githubApiUrl);\n      // Cache the response using the key and converting it to a string for storage\n      if (typeof window !== 'undefined') {\n        // Cache the response data\n        localStorage.setItem(this.cacheKey, JSON.stringify(result));\n      }\n      return result;\n    }\n    /**\n     * Retrieves colors for various programming languages\n     * @returns Dict of Colors for Various Coding Langs\n     */\n    getGithubColors() {\n      return this.http.get(this.colorsUrl);\n    }\n    /**\n     * Retrieves the list of all the public repos under this's user Github profile.\n     * Check for cached data from local storage before making the API call, then cache API responses if cache data does not exist\n     *\n     * @param username a string of the user's Github username\n     */\n    getPublicRepoList(username) {\n      // Check if this data is available locally\n      const cachedData = localStorage.getItem(this.cacheKey);\n      if (cachedData) {\n        // Return the Cached Data to reduce API Calls\n        // of is an operator used to create an Observable that emits the values provided to it\n        // parse is required to convert a JSON string back to a JSON object after retrieving from storage\n        return of(JSON.parse(cachedData));\n      }\n      // Set up the URL & Make the API Call\n      const githubApiUrl = `${this.githubBaseUrl}/users/${username}/repos`;\n      // Make the API call and filter the results\n      return this.http.get(githubApiUrl).pipe(map(repos => {\n        // Filter the repos to accept only those with a description\n        const filteredRepos = repos.filter(repo => repo.description !== null);\n        // Cache the response using the key and converting it to a string for storage\n        if (typeof window !== 'undefined') {\n          // Cache the response data\n          localStorage.setItem(this.cacheKey, JSON.stringify(filteredRepos));\n        }\n        return filteredRepos;\n      }), catchError(error => {\n        // Handle errors here\n        console.error('Error fetching repo list', error);\n        return of([]); // Return empty array on error\n      }));\n    }\n    static #_ = this.ɵfac = function GithubService_Factory(t) {\n      return new (t || GithubService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: GithubService,\n      factory: GithubService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return GithubService;\n})();","map":{"version":3,"names":["of","catchError","map","GithubService","constructor","http","githubBaseUrl","colorsUrl","cacheKey","getGithubRepoData","username","repoName","cachedData","localStorage","getItem","JSON","parse","githubApiUrl","result","get","window","setItem","stringify","getGithubColors","getPublicRepoList","pipe","repos","filteredRepos","filter","repo","description","error","console","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/ngxua/Documents/ComputerScience_Projects/Personal-Website/src/app/services/github.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GithubService {\n    // readonly makes properties immutable\n    private readonly githubBaseUrl = \"https://api.github.com\";\n    private readonly colorsUrl = 'https://raw.githubusercontent.com/ozh/github-colors/master/colors.json';\n    // unique identifying for storing and retrieving data\n    private readonly cacheKey = \"githubrepocachekey\";\n\n    constructor(private http: HttpClient) {}\n    \n    /**\n    * Retrieves Github Repo Information\n    * \n    * Service makes HTTP requests using this.http.\n    * Every HTTP request returns an RxJS Observable; when subscribed, it sends the request and emits the results when the server responds.\n    * @param user GitHub username\n    * @param repoName Repository name\n    * @returns Observable with repository data\n    */\n    getGithubRepoData(username: string, repoName: string): Observable<any> {\n        // Check if this data is available locally\n        const cachedData = localStorage.getItem(this.cacheKey);\n        if (cachedData) {\n            // Return the Cached Data to reduce API Calls\n            // of is an operator used to create an Observable that emits the values provided to it\n            // parse is required to convert a JSON string back to a JSON object after retrieving from storage\n            return of(JSON.parse(cachedData));\n        }\n\n        // Modify Base URL\n        const githubApiUrl = `${this.githubBaseUrl}/repos/${username}/${repoName}`;\n        const result =  this.http.get<any>(githubApiUrl);\n        // Cache the response using the key and converting it to a string for storage\n        if (typeof window !== 'undefined') {\n            // Cache the response data\n            localStorage.setItem(this.cacheKey, JSON.stringify(result));\n        }\n\n        return result;\n    }\n\n    /**\n     * Retrieves colors for various programming languages\n     * @returns Dict of Colors for Various Coding Langs\n     */\n    getGithubColors(): Observable<any> {\n        return this.http.get<any>(this.colorsUrl);\n    }\n\n    /**\n     * Retrieves the list of all the public repos under this's user Github profile.\n     * Check for cached data from local storage before making the API call, then cache API responses if cache data does not exist\n     * \n     * @param username a string of the user's Github username\n     */\n    getPublicRepoList(username: string): Observable<any[]> {\n        // Check if this data is available locally\n        const cachedData = localStorage.getItem(this.cacheKey);\n        if (cachedData) {\n            // Return the Cached Data to reduce API Calls\n            // of is an operator used to create an Observable that emits the values provided to it\n            // parse is required to convert a JSON string back to a JSON object after retrieving from storage\n            return of(JSON.parse(cachedData));\n        }\n\n        // Set up the URL & Make the API Call\n        const githubApiUrl = `${this.githubBaseUrl}/users/${username}/repos`;\n        \n        // Make the API call and filter the results\n        return this.http.get<any[]>(githubApiUrl).pipe(\n            map(repos => {\n                // Filter the repos to accept only those with a description\n                const filteredRepos = repos.filter(repo => repo.description !== null);\n                // Cache the response using the key and converting it to a string for storage\n                if (typeof window !== 'undefined') {\n                    // Cache the response data\n                    localStorage.setItem(this.cacheKey, JSON.stringify(filteredRepos));\n                  }\n                return filteredRepos;\n            }),\n            catchError(error => {\n                // Handle errors here\n                console.error('Error fetching repo list', error);\n                return of([]); // Return empty array on error\n            })\n        );\n    }\n  \n}\n"],"mappings":"AAEA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;AAKhD,WAAaC,aAAa;EAApB,MAAOA,aAAa;IAOtBC,YAAoBC,IAAgB;MAAhB,KAAAA,IAAI,GAAJA,IAAI;MANxB;MACiB,KAAAC,aAAa,GAAG,wBAAwB;MACxC,KAAAC,SAAS,GAAG,wEAAwE;MACrG;MACiB,KAAAC,QAAQ,GAAG,oBAAoB;IAET;IAEvC;;;;;;;;;IASAC,iBAAiBA,CAACC,QAAgB,EAAEC,QAAgB;MAChD;MACA,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACN,QAAQ,CAAC;MACtD,IAAII,UAAU,EAAE;QACZ;QACA;QACA;QACA,OAAOZ,EAAE,CAACe,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAC;MACrC;MAEA;MACA,MAAMK,YAAY,GAAG,GAAG,IAAI,CAACX,aAAa,UAAUI,QAAQ,IAAIC,QAAQ,EAAE;MAC1E,MAAMO,MAAM,GAAI,IAAI,CAACb,IAAI,CAACc,GAAG,CAAMF,YAAY,CAAC;MAChD;MACA,IAAI,OAAOG,MAAM,KAAK,WAAW,EAAE;QAC/B;QACAP,YAAY,CAACQ,OAAO,CAAC,IAAI,CAACb,QAAQ,EAAEO,IAAI,CAACO,SAAS,CAACJ,MAAM,CAAC,CAAC;MAC/D;MAEA,OAAOA,MAAM;IACjB;IAEA;;;;IAIAK,eAAeA,CAAA;MACX,OAAO,IAAI,CAAClB,IAAI,CAACc,GAAG,CAAM,IAAI,CAACZ,SAAS,CAAC;IAC7C;IAEA;;;;;;IAMAiB,iBAAiBA,CAACd,QAAgB;MAC9B;MACA,MAAME,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACN,QAAQ,CAAC;MACtD,IAAII,UAAU,EAAE;QACZ;QACA;QACA;QACA,OAAOZ,EAAE,CAACe,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAC;MACrC;MAEA;MACA,MAAMK,YAAY,GAAG,GAAG,IAAI,CAACX,aAAa,UAAUI,QAAQ,QAAQ;MAEpE;MACA,OAAO,IAAI,CAACL,IAAI,CAACc,GAAG,CAAQF,YAAY,CAAC,CAACQ,IAAI,CAC1CvB,GAAG,CAACwB,KAAK,IAAG;QACR;QACA,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,WAAW,KAAK,IAAI,CAAC;QACrE;QACA,IAAI,OAAOV,MAAM,KAAK,WAAW,EAAE;UAC/B;UACAP,YAAY,CAACQ,OAAO,CAAC,IAAI,CAACb,QAAQ,EAAEO,IAAI,CAACO,SAAS,CAACK,aAAa,CAAC,CAAC;QACpE;QACF,OAAOA,aAAa;MACxB,CAAC,CAAC,EACF1B,UAAU,CAAC8B,KAAK,IAAG;QACf;QACAC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChD,OAAO/B,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;MACnB,CAAC,CAAC,CACL;IACL;IAAC,QAAAiC,CAAA,G;uBArFQ9B,aAAa,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;IAAA,QAAAC,EAAA,G;aAAbnC,aAAa;MAAAoC,OAAA,EAAbpC,aAAa,CAAAqC,IAAA;MAAAC,UAAA,EAFZ;IAAM;;SAEPtC,aAAa;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}