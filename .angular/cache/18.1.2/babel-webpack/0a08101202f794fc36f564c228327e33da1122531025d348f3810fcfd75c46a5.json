{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { ProjectcardComponent } from 'src/app/components/projectcard/projectcard.component';\nimport { NavbarComponent } from 'src/app/components/navbar/navbar.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/github.service\";\nimport * as i2 from \"@angular/common\";\nfunction ProjectpageComponent_app_projectcard_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-projectcard\", 4);\n  }\n  if (rf & 2) {\n    const repo_r1 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"repoData\", repo_r1)(\"githubColors\", ctx_r1.githubColors);\n  }\n}\nexport let ProjectpageComponent = /*#__PURE__*/(() => {\n  class ProjectpageComponent {\n    // Inject the Github DataService to get our repos\n    constructor(githubService) {\n      this.githubService = githubService;\n      // OnInit is an interface used to perform initialisation tasks\n      // Data Variables to track the API Calls\n      this.repoListData = [];\n    }\n    ngOnInit() {\n      // Retrieve colors here first to prevent multiple API calls with each repo card\n      this.githubService.getGithubColors().subscribe(colors => {\n        this.githubColors = colors;\n        this.fetchRepoData();\n      }, error => console.error('Error fetching colors:', error));\n    }\n    fetchRepoData() {\n      // Retrieve the list of relevant public repos\n      this.githubService.getPublicRepoList(\"Xuanniee\").subscribe(repoListData => {\n        this.repoListData = repoListData;\n        console.log(this.repoListData);\n      }, error => console.error('Error: ', error));\n    }\n    static #_ = this.ɵfac = function ProjectpageComponent_Factory(t) {\n      return new (t || ProjectpageComponent)(i0.ɵɵdirectiveInject(i1.GithubService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ProjectpageComponent,\n      selectors: [[\"app-projectpage\"]],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 7,\n      vars: 1,\n      consts: [[1, \"projectPage\"], [1, \"project-div\"], [1, \"project-grid\"], [3, \"repoData\", \"githubColors\", 4, \"ngFor\", \"ngForOf\"], [3, \"repoData\", \"githubColors\"]],\n      template: function ProjectpageComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵelement(1, \"app-navbar\");\n          i0.ɵɵelementStart(2, \"div\", 1)(3, \"h1\");\n          i0.ɵɵtext(4, \"Projects\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"div\", 2);\n          i0.ɵɵtemplate(6, ProjectpageComponent_app_projectcard_6_Template, 1, 2, \"app-projectcard\", 3);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngForOf\", ctx.repoListData);\n        }\n      },\n      dependencies: [ProjectcardComponent, NavbarComponent, CommonModule, i2.NgForOf],\n      styles: [\".projectPage[_ngcontent-%COMP%]{color:#333;background-color:#ddd}.project-div[_ngcontent-%COMP%]{display:flex;flex-direction:column;width:100%;justify-content:center;margin:0 auto;padding:0 10px}.project-div[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%]{width:100%;margin:15px 0;justify-content:center;align-items:center}.project-grid[_ngcontent-%COMP%]{gap:10px;justify-content:space-evenly;display:grid;grid-template-columns:repeat(2,1fr);max-width:80%;margin:0 auto}\"]\n    });\n  }\n  return ProjectpageComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}