{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { ProjectcardComponent } from 'src/app/components/projectcard/projectcard.component';\nimport { NavbarComponent } from 'src/app/components/navbar/navbar.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/github.service\";\nimport * as i2 from \"@angular/common\";\nfunction ProjectpageComponent_app_projectcard_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-projectcard\", 4);\n  }\n  if (rf & 2) {\n    const repo_r1 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"repoData\", repo_r1)(\"githubColors\", ctx_r1.githubColors);\n  }\n}\nexport let ProjectpageComponent = /*#__PURE__*/(() => {\n  class ProjectpageComponent {\n    // Inject the Github DataService to get our repos\n    constructor(githubService) {\n      this.githubService = githubService;\n      // OnInit is an interface used to perform initialisation tasks\n      // Data Variables to track the API Calls\n      this.repoListData = [];\n    }\n    ngOnInit() {\n      // Retrieve colors here first to prevent multiple API calls with each repo card\n      this.githubService.getGithubColors().subscribe(colors => {\n        this.githubColors = colors;\n        this.fetchRepoData();\n      }, error => console.error('Error fetching colors:', error));\n    }\n    fetchRepoData() {\n      // Retrieve the list of relevant public repos\n      this.githubService.getPublicRepoList(\"Xuanniee\").subscribe(repoListData => {\n        this.repoListData = repoListData;\n        console.log(this.repoListData);\n      }, error => console.error('Error: ', error));\n    }\n    static #_ = this.ɵfac = function ProjectpageComponent_Factory(t) {\n      return new (t || ProjectpageComponent)(i0.ɵɵdirectiveInject(i1.GithubService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ProjectpageComponent,\n      selectors: [[\"app-projectpage\"]],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 7,\n      vars: 1,\n      consts: [[1, \"projectPage\"], [1, \"project-div\"], [1, \"project-grid\"], [3, \"repoData\", \"githubColors\", 4, \"ngFor\", \"ngForOf\"], [3, \"repoData\", \"githubColors\"]],\n      template: function ProjectpageComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵelement(1, \"app-navbar\");\n          i0.ɵɵelementStart(2, \"div\", 1)(3, \"h1\");\n          i0.ɵɵtext(4, \"Projects\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"div\", 2);\n          i0.ɵɵtemplate(6, ProjectpageComponent_app_projectcard_6_Template, 1, 2, \"app-projectcard\", 3);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngForOf\", ctx.repoListData);\n        }\n      },\n      dependencies: [ProjectcardComponent, NavbarComponent, CommonModule, i2.NgForOf],\n      styles: [\".projectPage[_ngcontent-%COMP%] {\\n    \\n\\n    color: #333333;\\n    background-color: #DDDDDD;\\n}\\n\\n.project-div[_ngcontent-%COMP%] {\\n    \\n\\n    display: flex;\\n    flex-direction: column;\\n\\n    \\n\\n    width: 100%;\\n    justify-content: center;\\n\\n    \\n\\n    margin: 0 auto;\\n    padding: 0 10px;\\n}\\n\\n.project-div[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%] {\\n    \\n\\n    width: 100%;\\n    margin: 15px 0;\\n\\n    \\n\\n    justify-content: center;\\n    align-items: center;\\n}\\n\\n.project-grid[_ngcontent-%COMP%] {\\n    \\n\\n    gap: 10px;\\n    justify-content: space-evenly;\\n\\n    display: grid;\\n    \\n\\n    grid-template-columns: repeat(2, 1fr);\\n    max-width: 80%;\\n    margin: 0 auto; \\n\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFnZXMvcHJvamVjdHBhZ2UvcHJvamVjdHBhZ2UuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLDJEQUEyRDtJQUMzRCxjQUFjO0lBQ2QseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0ksd0NBQXdDO0lBQ3hDLGFBQWE7SUFDYixzQkFBc0I7O0lBRXRCLHdCQUF3QjtJQUN4QixXQUFXO0lBQ1gsdUJBQXVCOztJQUV2QiwyQ0FBMkM7SUFDM0MsY0FBYztJQUNkLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxnQ0FBZ0M7SUFDaEMsV0FBVztJQUNYLGNBQWM7O0lBRWQsbUZBQW1GO0lBQ25GLHVCQUF1QjtJQUN2QixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSw4Q0FBOEM7SUFDOUMsU0FBUztJQUNULDZCQUE2Qjs7SUFFN0IsYUFBYTtJQUNiLCtGQUErRjtJQUMvRixxQ0FBcUM7SUFDckMsY0FBYztJQUNkLGNBQWMsRUFBRSx5QkFBeUI7QUFDN0MiLCJzb3VyY2VzQ29udGVudCI6WyIucHJvamVjdFBhZ2Uge1xyXG4gICAgLyoqIFNldHRpbmcgdGhlIGJnIGFuZCB0ZXh0IGNvbG9ycywgYWxvbmcgd2l0aCBmb250IHR5cGVzICovXHJcbiAgICBjb2xvcjogIzMzMzMzMztcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNEREREREQ7XHJcbn1cclxuXHJcbi5wcm9qZWN0LWRpdiB7XHJcbiAgICAvKiBEaXNwbGF5IHRoZSBQcm9qZWN0IGluIENvbHVtbnMgb2YgMiAqL1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcblxyXG4gICAgLyogQ2VudGVyIGhvcml6b250YWxseSAqL1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuXHJcbiAgICAvKiBDcmVhdGluZyBTcGFjZSBhbmQgY2VudGVyaW5nIHRoZSBjYXJkcyAqL1xyXG4gICAgbWFyZ2luOiAwIGF1dG87XHJcbiAgICBwYWRkaW5nOiAwIDEwcHg7XHJcbn1cclxuXHJcbi5wcm9qZWN0LWRpdiBoMSB7XHJcbiAgICAvKiBDaGlsZCBIZWFkZXIgb2YgUHJvamVjdCBEaXYgKi9cclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgbWFyZ2luOiAxNXB4IDA7XHJcblxyXG4gICAgLyogQWxpZ24gdGhlIHByb2plY3QgaG9yaXpvbnRhbGx5IGNvcyB0aGUgbWFpbiBheGlzIGlzIHkgYXMgaXQgaXMgYSBjb2wgcmlnaHQgbm93ICovXHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbn1cclxuXHJcbi5wcm9qZWN0LWdyaWQge1xyXG4gICAgLyogU3BhY2UgYmV0d2VlbiBjYXJkcyBhbmQgc3BhY2UgdGhlbSBldmVubHkgKi9cclxuICAgIGdhcDogMTBweDtcclxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtZXZlbmx5O1xyXG5cclxuICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICAvKiBjcmVhdGVzIGV4YWN0bHkgMiBjb2x1bW5zLCBlYWNoIHRha2luZyB1cCBhbiBlcXVhbCBmcmFjdGlvbiAoMWZyKSBvZiB0aGUgYXZhaWxhYmxlIHNwYWNlLiAgKi9cclxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDIsIDFmcik7XHJcbiAgICBtYXgtd2lkdGg6IDgwJTtcclxuICAgIG1hcmdpbjogMCBhdXRvOyAvKiBDZW50ZXIgdGhlIGNvbnRhaW5lciAqL1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n  return ProjectpageComponent;\n})();","map":{"version":3,"names":["CommonModule","ProjectcardComponent","NavbarComponent","i0","ɵɵelement","ɵɵproperty","repo_r1","ctx_r1","githubColors","ProjectpageComponent","constructor","githubService","repoListData","ngOnInit","getGithubColors","subscribe","colors","fetchRepoData","error","console","getPublicRepoList","log","_","ɵɵdirectiveInject","i1","GithubService","_2","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","ProjectpageComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵtemplate","ProjectpageComponent_app_projectcard_6_Template","ɵɵadvance","i2","NgForOf","styles"],"sources":["/Users/ngxua/Documents/ComputerScience_Projects/Personal-Website/src/app/pages/projectpage/projectpage.component.ts","/Users/ngxua/Documents/ComputerScience_Projects/Personal-Website/src/app/pages/projectpage/projectpage.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ProjectcardComponent } from 'src/app/components/projectcard/projectcard.component';\nimport { NavbarComponent } from 'src/app/components/navbar/navbar.component';\nimport { GithubService } from 'src/app/services/github.service';\n\n@Component({\n  selector: 'app-projectpage',\n  standalone: true,\n  imports: [ProjectcardComponent, NavbarComponent, CommonModule],\n  templateUrl: './projectpage.component.html',\n  styleUrl: './projectpage.component.css'\n})\nexport class ProjectpageComponent implements OnInit {\n    // OnInit is an interface used to perform initialisation tasks\n    // Data Variables to track the API Calls\n    repoListData: any[] = [];\n    githubColors: any;\n\n    // Inject the Github DataService to get our repos\n    constructor(private githubService: GithubService) {}\n\n    ngOnInit(): void {\n        // Retrieve colors here first to prevent multiple API calls with each repo card\n        this.githubService.getGithubColors().subscribe(\n            colors => {\n                this.githubColors = colors;\n                this.fetchRepoData();\n            },\n            error => console.error('Error fetching colors:', error)\n        );\n    }\n\n    fetchRepoData(): void {\n        // Retrieve the list of relevant public repos\n        this.githubService.getPublicRepoList(\n            \"Xuanniee\"\n        ).subscribe(\n            repoListData => {\n                this.repoListData = repoListData;\n                console.log(this.repoListData);\n            },\n            error => console.error('Error: ', error)\n        );\n    }\n}\n","<div class=\"projectPage\">\n    <app-navbar></app-navbar>\n\n    <div class=\"project-div\">\n        <h1>Projects</h1>\n        \n        <div class=\"project-grid\">\n            <app-projectcard\n                *ngFor=\"let repo of repoListData\"\n                [repoData]=repo\n                [githubColors]=githubColors\n            >\n            </app-projectcard>\n        </div>\n    </div>\n</div>\n\n\n"],"mappings":"AACA,SAASA,YAAY,QAAQ,iBAAiB;AAE9C,SAASC,oBAAoB,QAAQ,sDAAsD;AAC3F,SAASC,eAAe,QAAQ,4CAA4C;;;;;;ICGhEC,EAAA,CAAAC,SAAA,yBAKkB;;;;;IAFdD,EADA,CAAAE,UAAA,aAAAC,OAAA,CAAe,iBAAAC,MAAA,CAAAC,YAAA,CACY;;;ADI3C,WAAaC,oBAAoB;EAA3B,MAAOA,oBAAoB;IAM7B;IACAC,YAAoBC,aAA4B;MAA5B,KAAAA,aAAa,GAAbA,aAAa;MANjC;MACA;MACA,KAAAC,YAAY,GAAU,EAAE;IAI2B;IAEnDC,QAAQA,CAAA;MACJ;MACA,IAAI,CAACF,aAAa,CAACG,eAAe,EAAE,CAACC,SAAS,CAC1CC,MAAM,IAAG;QACL,IAAI,CAACR,YAAY,GAAGQ,MAAM;QAC1B,IAAI,CAACC,aAAa,EAAE;MACxB,CAAC,EACDC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC,CAC1D;IACL;IAEAD,aAAaA,CAAA;MACT;MACA,IAAI,CAACN,aAAa,CAACS,iBAAiB,CAChC,UAAU,CACb,CAACL,SAAS,CACPH,YAAY,IAAG;QACX,IAAI,CAACA,YAAY,GAAGA,YAAY;QAChCO,OAAO,CAACE,GAAG,CAAC,IAAI,CAACT,YAAY,CAAC;MAClC,CAAC,EACDM,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC,CAC3C;IACL;IAAC,QAAAI,CAAA,G;uBA/BQb,oBAAoB,EAAAN,EAAA,CAAAoB,iBAAA,CAAAC,EAAA,CAAAC,aAAA;IAAA;IAAA,QAAAC,EAAA,G;YAApBjB,oBAAoB;MAAAkB,SAAA;MAAAC,UAAA;MAAAC,QAAA,GAAA1B,EAAA,CAAA2B,mBAAA;MAAAC,KAAA;MAAAC,IAAA;MAAAC,MAAA;MAAAC,QAAA,WAAAC,8BAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCdjCjC,EAAA,CAAAmC,cAAA,aAAyB;UACrBnC,EAAA,CAAAC,SAAA,iBAAyB;UAGrBD,EADJ,CAAAmC,cAAA,aAAyB,SACjB;UAAAnC,EAAA,CAAAoC,MAAA,eAAQ;UAAApC,EAAA,CAAAqC,YAAA,EAAK;UAEjBrC,EAAA,CAAAmC,cAAA,aAA0B;UACtBnC,EAAA,CAAAsC,UAAA,IAAAC,+CAAA,6BAIC;UAIbvC,EAFQ,CAAAqC,YAAA,EAAM,EACJ,EACJ;;;UAP2BrC,EAAA,CAAAwC,SAAA,GAAe;UAAfxC,EAAA,CAAAE,UAAA,YAAAgC,GAAA,CAAAzB,YAAA,CAAe;;;qBDEpCX,oBAAoB,EAAEC,eAAe,EAAEF,YAAY,EAAA4C,EAAA,CAAAC,OAAA;MAAAC,MAAA;IAAA;;SAIlDrC,oBAAoB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}