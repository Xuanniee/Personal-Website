{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let GithubService = /*#__PURE__*/(() => {\n  class GithubService {\n    constructor(http) {\n      this.http = http;\n      // readonly makes properties immutable\n      this.githubBaseUrl = \"https://api.github.com\";\n      this.colorsUrl = 'https://raw.githubusercontent.com/ozh/github-colors/master/colors.json';\n      // unique identifying for storing and retrieving data\n      this.cacheKey = \"githubrepocachekey\";\n    }\n    /**\n    * Retrieves Github Repo Information\n    *\n    * Service makes HTTP requests using this.http.\n    * Every HTTP request returns an RxJS Observable; when subscribed, it sends the request and emits the results when the server responds.\n    * @param user GitHub username\n    * @param repoName Repository name\n    * @returns Observable with repository data\n    */\n    getGithubRepoData(username, repoName) {\n      // Check if this data is available locally\n      const cachedData = localStorage.getItem(this.cacheKey);\n      if (cachedData) {\n        // Return the Cached Data to reduce API Calls\n        // of is an operator used to create an Observable that emits the values provided to it\n        // parse is required to convert a JSON string back to a JSON object after retrieving from storage\n        return of(JSON.parse(cachedData));\n      }\n      // Modify Base URL\n      const githubApiUrl = `${this.githubBaseUrl}/repos/${username}/${repoName}`;\n      const result = this.http.get(githubApiUrl);\n      // Cache the response using the key and converting it to a string for storage\n      if (typeof window !== 'undefined') {\n        // Cache the response data\n        localStorage.setItem(this.cacheKey, JSON.stringify(result));\n      }\n      return result;\n    }\n    /**\n     * Retrieves colors for various programming languages\n     * @returns Dict of Colors for Various Coding Langs\n     */\n    getGithubColors() {\n      return this.http.get(this.colorsUrl);\n    }\n    /**\n     * Retrieves the list of all the public repos under this's user Github profile.\n     * Check for cached data from local storage before making the API call, then cache API responses if cache data does not exist\n     *\n     * @param username a string of the user's Github username\n     */\n    getPublicRepoList(username) {\n      // Check if this data is available locally\n      const cachedData = localStorage.getItem(this.cacheKey);\n      if (cachedData) {\n        // Return the Cached Data to reduce API Calls\n        // of is an operator used to create an Observable that emits the values provided to it\n        // parse is required to convert a JSON string back to a JSON object after retrieving from storage\n        return of(JSON.parse(cachedData));\n      }\n      // Set up the URL & Make the API Call\n      const githubApiUrl = `${this.githubBaseUrl}/users/${username}/repos`;\n      // Make the API call and filter the results\n      return this.http.get(githubApiUrl).pipe(map(repos => {\n        // Filter the repos to accept only those with a description\n        const filteredRepos = repos.filter(repo => repo.description !== null);\n        // Cache the response using the key and converting it to a string for storage\n        if (typeof window !== 'undefined') {\n          // Cache the response data\n          localStorage.setItem(this.cacheKey, JSON.stringify(filteredRepos));\n        }\n        return filteredRepos;\n      }), catchError(error => {\n        // Handle errors here\n        console.error('Error fetching repo list', error);\n        return of([]); // Return empty array on error\n      }));\n    }\n    static #_ = this.ɵfac = function GithubService_Factory(t) {\n      return new (t || GithubService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: GithubService,\n      factory: GithubService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return GithubService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}